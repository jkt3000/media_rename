#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), "../lib"))

require "bundler/setup"
require "media_rename"
require 'thor'
require 'io/console'

class MediaRenameCLI < Thor


  desc "plex <path>", "Rename media files based on data from Plex database"
  method_option :preview,
                type: :boolean,
                default: false,
                desc: "Dry run - don't actually make changes"
  method_option :host, 
                type: :string,
                desc: "Plex Server host/ip address (use https://x.x.x.x for https or ip address for http)" 
  method_option :port, 
                type: :string,
                desc: "Plex Server port" 
  method_option :token, 
                type: :string,
                desc: "Plex token" 
  method_option :verbose,
                type: :boolean,
                aliases: 'v',
                default: false,
                desc: "Verbose"
  method_option :target_path,
                type: :string,
                aliases: 't',
                desc: "Target path"

  method_option :confirm,
                type: :boolean,
                aliases: 'c',
                default: true,
                desc: "Require Confirmation"

  def plex(path)
    renamer = MediaRename::PlexRenamer.new(path, options)
    renamer.rename
  end


  private


  def rename_media_files(path, params)
    files = MediaRename::Utils.media_files(path).sort
    puts "Found [#{files.count}] media files"
    
    return unless files.count > 0
    return unless confirmation(path, options)

    parent_path = File.dirname(path)
    renamer = MediaRename::PlexRenamer.new(parent_path, params)
    puts "processing parent folder #{parent_path} for #{files.count} files"
    renamer.rename(path)
  end

  def rename_folders(path, params)
    renamer = MediaRename::PlexRenamer.new(path, params)
    folders = MediaRename::Utils.folders(path).sort
    puts "Found [#{folders.count}] folders"
    folders.each do |folder|
      if confirmation(folder, options)
        puts "processing #{folder}"
        renamer.rename(folder)
      else
        puts "skip"
      end
    end
  end

  def confirmation(msg, options)
    return true unless options[:confirmation_required] == true
    puts "> #{msg}?\nCONFIRM? [Y/n/q]"
    value = STDIN.getch
    case value
    when 'q', "Q", "\u0003"
      puts
      abort("Quitting...")
    when 'y', "Y", "\r", "\n"
      puts
      true
    else
      false
    end
  end

  def set_log_level(verbose)
    MediaRename.logger.level = verbose ? :debug : :info
  end

  def init_plex(options)
    settings = MediaRename::SETTINGS
    Plex.configure do |config|
      if host = options.fetch(:plex_host, settings.fetch("PLEX_HOST", nil))
        config[:host] = host
      end
      if port = options.fetch(:plex_port, settings.fetch("PLEX_PORT", nil))
        config[:port] = port
      end
      if token = options.fetch(:plex_token, settings.fetch("PLEX_TOKEN", nil))
        config[:token] = token
      end
    end
    p Plex.config
  end
end


MediaRenameCLI.start